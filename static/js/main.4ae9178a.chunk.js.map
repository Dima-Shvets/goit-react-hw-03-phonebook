{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/ContactList/ContactList.module.scss","components/Filter/Filter.module.scss","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","nameInputId","nanoid","numberInputId","ContactForm","state","name","number","inputHandler","e","target","value","setState","submitHandler","preventDefault","props","addContact","reset","this","className","s","onSubmit","htmlFor","id","type","pattern","title","required","onChange","Component","ContactList","filteredContacts","map","element","button","onClick","deleteContact","filterId","Filter","filterHandler","message","updateFilter","label","input","filter","App","contacts","check","find","contact","alert","updatedContacts","filterContacts","normalizedFilter","toLocaleLowerCase","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","prevState","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ae9178a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact-form\":\"ContactForm_contact-form__20Svk\",\"name-label\":\"ContactForm_name-label__Yiibn\",\"number-label\":\"ContactForm_number-label__2J4d_\",\"number-input\":\"ContactForm_number-input__1nsng\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"element\":\"ContactList_element__1y_zA\",\"button\":\"ContactList_button__Ddv9d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1-IKR\",\"input\":\"Filter_input__g_LSX\"};","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport s from './ContactForm.module.scss';\n\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\n\nexport class ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  inputHandler = e => {\n    const { value, name } = e.target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  submitHandler = e => {\n    e.preventDefault();\n\n    this.props.addContact(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form className={s['contact-form']} onSubmit={this.submitHandler}>\n        <label htmlFor={nameInputId} className={s['name-label']}>\n          Name\n        </label>\n        <input\n          id={nameInputId}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={this.inputHandler}\n        />\n        <label htmlFor={numberInputId} className={s['number-label']}>\n          Number\n        </label>\n        <input\n          id={numberInputId}\n          className={s['number-input']}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={this.inputHandler}\n        />\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  addContact: PropTypes.func.isRequired,\n};\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.scss';\n\nexport class ContactList extends Component {\n  render() {\n    return (\n      <ul>\n        {this.props.filteredContacts.map(({ id, name, number }) => {\n          return (\n            <li key={id} className={s.element}>\n              {name}: {number}\n              <button\n                className={s.button}\n                type=\"button\"\n                onClick={() => this.props.deleteContact(id)}\n              >\n                Delete\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n\nContactList.propTypes = {\n  filteredContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport s from './Filter.module.scss';\n\nconst filterId = nanoid();\n\nexport class Filter extends Component {\n  filterHandler = e => {\n    const message = e.target.value;\n    this.props.updateFilter(message);\n  };\n\n  render() {\n    return (\n      <>\n        <label className={s.label} htmlFor={filterId}>\n          Find contacts by name\n        </label>\n        <input\n          className={s.input}\n          id={filterId}\n          type=\"text\"\n          name=\"filter\"\n          value={this.props.filter}\n          onChange={this.filterHandler}\n        />\n      </>\n    );\n  }\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  updateFilter: PropTypes.func.isRequired,\n};\n","import { Component } from 'react';\nimport { ContactForm } from './components/ContactForm';\nimport { ContactList } from './components/ContactList';\nimport { Filter } from './components/Filter';\nimport { nanoid } from 'nanoid';\nimport './common-style.scss';\nimport './App.scss';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const newContacts = this.state.contacts;\n    const prevContacts = prevState;\n\n    if (prevContacts !== newContacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = ({ name, number }) => {\n    const { contacts } = this.state;\n    const check = contacts.find(contact => contact.name === name);\n\n    if (check) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    const contact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    this.setState(({ contacts }) => ({\n      contacts: [contact, ...contacts],\n    }));\n  };\n\n  deleteContact = id => {\n    const { contacts } = this.state;\n\n    const updatedContacts = contacts.filter(contact => contact.id !== id);\n\n    this.setState({\n      contacts: [...updatedContacts],\n    });\n  };\n\n  filterContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLocaleLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLocaleLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  updateFilter = message => {\n    this.setState({\n      filter: message,\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm addContact={this.addContact} />\n        <h2>Contacts</h2>\n        <Filter filter={this.state.filter} updateFilter={this.updateFilter} />\n        <ContactList\n          filteredContacts={this.filterContacts()}\n          deleteContact={this.deleteContact}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}